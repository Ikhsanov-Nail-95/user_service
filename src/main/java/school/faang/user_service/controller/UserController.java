package school.faang.user_service.controller;

import jakarta.validation.Valid;
import jakarta.validation.constraints.Positive;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import school.faang.user_service.dto.UserDto;
import school.faang.user_service.service.user.UserService;

import java.util.List;

@Slf4j
@Validated
@RequiredArgsConstructor
@RestController
@RequestMapping("/users")
public class UserController {

    private final UserService userService;

    @GetMapping("/{id}")
    public UserDto getUser(@PathVariable("id") @Positive(message = "User ID must be positive") long id) {
        return userService.getUser(id);
    }

    @PostMapping("/create")
    public UserDto create(@RequestBody @Valid UserDto userDto) {
        return userService.create( userDto );
    }

    @PostMapping
    public List<UserDto> getUsersByIds(@RequestBody List<Long> ids) {
        log.info("getUsersByIds was called");
        return userService.getUsersByIds(ids);
    }

    @PostMapping("/deactivate/{id}")
    public void deactivate(@PathVariable("id") long id) {
        userService.deactivate(id);
    }
}

/**
 * –ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:
 * üîß 1. –ò—Å–ø—Ä–∞–≤—å UserService, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª 404, –∞ –Ω–µ 500:
 * –í –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ UserController#getUser:
 *
 * java
 * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
 * @GetMapping("/{id}")
 * public ResponseEntity<UserResponse> getUser(@PathVariable Long id) {
 *     try {
 *         UserResponse user = userService.getUser(id);
 *         return ResponseEntity.ok(user);
 *     } catch (UserNotFoundException e) {
 *         return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null); // –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π body
 *     }
 * }
 * –ò–ª–∏ –ª—É—á—à–µ ‚Äî –ø—Ä–æ–±—Ä–æ—Å—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º @ControllerAdvice –æ–±—Ä–∞–±–æ—Ç–∞–π –µ–≥–æ:
 *
 * java
 * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
 * @ResponseStatus(HttpStatus.NOT_FOUND)
 * @ExceptionHandler(UserNotFoundException.class)
 * public ErrorResponse handleNotFound(UserNotFoundException ex) {
 *     return new ErrorResponse("User not found.");
 * }
 * –≠—Ç–æ –¥–∞—Å—Ç:
 *
 * rust
 * –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
 * HTTP 404 -> FeignException.NotFound
 * –ò –≤ PostService —Ç—ã —Å–º–æ–∂–µ—à—å –ª–æ–≤–∏—Ç—å FeignException.NotFound –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏ @Retryable –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å –≤—ã–∑–æ–≤—ã.
 */